## Getting Started
### Analysis of a Web Page

![The life cycle of a typical Web page](web_page_life_cycle.png)

**The Players.** The players in Figure 2.1 represent the applications involved in the life cycle of a Web page. When you start using PHP, it is normally not the only player, but part of a team of players, including a browser (Firefox, Netscape, Internet Explorer), a network (HTTP), a server (Apache, Windows IIS, Sambar), a server module (PHP, ASP, ColdFusion), and external files or a database (MySQL, Oracle, Sybase).

**The Steps.** Figure 2.1 illustrates the life cycle of a Web page from when the client makes a request until it gets a response. We will explain each of steps by the number shown in the diagram.

1. On the left side of the diagram, we see the client, or browser where the request is made. The browser may be Internet Explorer, Firefox, Netscape, and so on. The user makes a request for a Web site by typing the address of the Web site in the browser's URL location box. The "request" is transmitted to the server via HTTP. The Web server on the other side accepts that request. If the request of for a static HTML file, the Web server responds by simply returning the file to the client's browser. The browser then renders the HTML tags, formats the page for display, and waits for another request. Going back and forth between the browser and the server is known as the Request/Response loop. It the basis of how the Web works.
2. The circle between the client side and the server side represents the network. This can be a very large network such as the Internet consisting of millions upon millions of computers, an intranet within an organization, or a wireless network on a personal desktop computer. The user doesn't care how big or small the network is - it is totally transparent. The protocol used to transfer documents to and from the server is called HTTP.
3. The server side includes an HTTP Web server such as Apache, Sambar, or Microsoft's Internet Information Services (IIS). Web servers are generic programs capable of accepting Web-based requests and providing the response to them. In most cases, this response is simply retrieving the file from the server's local file system. With dynamic Web sites, Web servers turn over the request for a specific file to an appropriate helper application. Web servers. such as Apache and IIS have a list of helper applications that process any specific language. The helper application could be an external program, such as CGI/Perl script, or one built right into the server, such as ColdFusion, ASP.NET, or a PHP script. For example, if the Web server sees a request for a PHP file, it looks up what helper application is assigned to process PHP requests, turns over the request to the PHP module, and waits until it gets the result back.
4. PHP is a module that resides within the Web server. The server opens the file (script) and reads it line by line. It hands over any PHP instructions to the PHP module for processing and replaces the PHP code with the output it generated back into the page. Because this processing is done first, PHP is called a hypertext preprocessor. Once the PHP instructions have been processed, the page that travels across the network back to the user's browser consists of just plain HTML and text.
5. If the Web page consists of PHP with MySQL (or nay other database) statements, then PHP may make further requests to the database to retrieve, send, or update information on the fly.

> ```
> # This simple example shows how to connect, execute a query, print resulting rows and disconnect
> # from a MySQL database.
> 
> # <?php
> # // Connecting, selecting database
> # $link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
> #     or die('Could not connect: ' . mysql_error());
> # echo 'Connected successfully';
> # mysql_select_db('my_database') or die('Could not select database');
>
> # // Performing SQL query
> # $query = 'SELECT * FROM my_table';
> # $result = mysql_query($query) or die('Query failed: ' . mysql_error());
> 
> # // Printing results in HTML
> # echo "<table>\n";
> # while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) {
> #     echo "\t<tr>\n";
> #     foreach ($line as $col_value) {
> #         echo "\t\t<td>$col_value</td>\n";
> #     }
> #     echo "\t</tr>\n";
> # }
> # echo "</table>\n";
> 
> # // Free resultset
> # mysql_free_result($result);
> 
> # // Closing connection
> # mysql_close($link);
> # ?>
> ```

### The Anatomy of a PHP Script
A PHP script is a file (ending with a `.php` extension) consisting of text, HTML, and PHP instructions interspersed throughput the file. The PHP instructions are contained within two HTML style tags; `<?php` is the opening tag and `?>` is the closing tag. Everything between these two tags is interpreted by the PHP module (also called interpreter) and converted to regular text and HTML before being sent back to the requesting browser. If, for example, one of the PHP instructions is to get today's date from the server, PHP will get the date and replace the PHP instruction with the current date. When the browser gets the file, it will not see the PHP tags or any of the PHP instructions; it will get only what PHP generated as a result of its processing.
